version: 2
references:
  npm_cache_key: &npm_cache_key
    key: npm-cache-{{ checksum "package.json" }}
  cf_install: &cf_install
    run:
      name: Install Cloud Foundry CLI
      command: |
        curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
        sudo dpkg -i cf-cli_amd64.deb
        cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
        cf install-plugin https://github.com/govau/cf-run-and-wait/releases/download/0.1/run-and-wait.linux64 -f
        cf -v
  deploy_docker: &deploy_docker
    docker:
      - image: circleci/node:8-stretch
        environment:
          TZ: "/usr/share/zoneinfo/Australia/Sydney"
  required_for_deploy: &required_for_deploy
    requires:
      - check_styles
      - run_tests

jobs:
  build:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - checkout

      - restore_cache:
          <<: *npm_cache_key
      - run: 
          name: Npm Install
          command: |
            npm install
      - save_cache:
          <<: *npm_cache_key
          paths:
            - node_modules

      - run: 
          name: Npm Build
          command: |
            npm run build
      
      - persist_to_workspace:
          root: .
          paths:
            - ~

  run_tests:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - run: 
          name: Run Tests
          command: |
            npm test
    
  check_styles:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - run: 
          name: Check Styles
          command: |
            npm run eslint

  slack_approval:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Slack about to go live
          command: |
            ./scripts/ci-notify-approval.sh

  run_automation_tests:
    docker:
      - image: circleci/node:10.15.3-stretch-browsers
    steps:
      - attach_workspace:
          at: .
      - checkout
      - run: 
          name: Run Tests
          command: |
            cd fixtures
            npm install
            export FRONTEND_ADDRESS=http://dm-dev.apps.y.cld.gov.au
            export SELLER_EMAIL=$AUTOMATION_SELLER_EMAIL_STAGING
            export SELLER_PASSWORD=$AUTOMATION_SELLER_PASSWORD_STAGING
            export BUYER_EMAIL=$AUTOMATION_BUYER_EMAIL_STAGING
            export BUYER_PASSWORD=$AUTOMATION_BUYER_PASSWORD_STAGING
            export TYPE_INPUT=false
            export SHORTEN_TYPED_INPUT=false
            export USE_CLIPBOARD_FOR_TYPE_INPUT=false
            export HEADLESS=true
            export IGNORE_MULTIPLE_LINKS=true
            export SELLER_CATEGORY=3
            export SELLER_NAME=auto
            npm test

  deploy_to_rc:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to RC
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-rc-frontend -f manifest.rc.yml --show-app-log

  deploy_to_production_clone:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to Production Clone
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-pc-frontend -f manifest.pc.yml --show-app-log

  deploy_to_staging:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to Staging
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-dev-frontend -f manifest.yml --show-app-log

  deploy_to_production:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to Production
          command: |
            cf login -a https://api.system.b.cld.gov.au -o dta -s marketplace -u $CF_USER_PROD -p $CF_PASSWORD_PROD
            cf zero-downtime-push dm-frontend -f manifest-prod.yml --show-app-log
            ./scripts/ci-notify.sh


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - check_styles:
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - run_tests:
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - slack_approval:
          <<: *required_for_deploy
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - approval:
          type: approval
          requires:
            - slack_approval
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy_to_rc:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: rc
      - deploy_to_staging:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - deploy_to_production:
          requires:
            - approval
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy_to_production_clone:
          requires:
            - approval
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
  automation_test:
    triggers:
      - schedule:
          cron: "0 9 * * 4"
          filters:
            branches:
              only: master
    jobs:
      - run_automation_tests:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
